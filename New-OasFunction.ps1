<#
.EXAMPLE
$Fname = "C:\code\OktaPosh\okta_doc\api.yaml"
$yaml = ConvertFrom-Yaml (gc $Fname -raw)
$x = c:\code\joat-powershell\Get-OasMethods.ps1 -Yaml $yaml
ri \temp\okta\* && $x | C:\code\joat-powershell\New-OasFunction.ps1 -Prefix Okta -ModuleName OktaPosh
#>
[CmdletBinding()]
param (
    [Parameter(Mandatory)]
    [string] $Prefix,
    [Parameter(Mandatory)]
    [string] $ModuleName,
    # [Parameter(Mandatory)]
    [string] $PathPrefix = "/api/v1/",
    [ValidateScript({Test-Path $_ -PathType Container})]
    [string] $folder = "c:/temp/okta",
    [Parameter(ValueFromPipeline)]
    [PSCustomObject] $ApiCall
)


begin
{
    $header = @"
<#

"@
}

process
{
    function ucFirstLetter([string] $s)
    {
        return $s[0].ToString().ToUpper()+$s.Substring(1)
    }

    function makeQuery
    {
    [CmdletBinding()]
    param($p)
    Set-StrictMode -Version Latest
        if ($p.in -eq 'query') {
            $name = $p.name
            "        if (`$$name -ne `$null) { `$query += `"$name=`$$name&`"}"
        }
    }

    function makeParam
    {
        param( [Parameter(Mandatory)]
         $parameter
         )
         $mandatory = $parameter.required ? "Mandatory" : ""
         $default = $parameter.default ? " = $($parameter.default)" : ""
         @"
        [Parameter($mandatory)]
        [$($parameter.type)] `$$(ucFirstLetter $parameter.name)$default
"@
    }
    function getVerb
    {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory)]
            [string] $method,
            [bool] $probablyGet
        )
        Set-StrictMode -Version Latest
        switch ($method)
        {
            "GET" { $probablyGet ? "Get" : "Find", $false, $false  }
            "POST" { "New", $true, $false  }
            "PUT" { "Update", $true, $false  }
            "PATCH" { "Update", $true, $false  }
            "DELETE" { "Remove", $true, $true  }
            Default { "??"}
        }

    }
    function getNoun
    {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory)]
            [string] $path,
            [Parameter(Mandatory)]
            [string] $prefix
        )
        Set-StrictMode -Version Latest

        $temp = (($path -replace $prefix, '') -replace '\?.*','') -split '/'
        $probablyGet = $temp[-1] -like "{*}"
        $parts = $temp |
            Where-Object { $_ -notlike "{*}" } |
            ForEach-Object {
            $n = ucFirstLetter $_
            if ($n.EndsWith('ies'))
            {
                $n = $n -replace 'ies$', 'y'
            }
            elseif ($n.EndsWith('s'))
            {
                $n = $n -replace 's$', ''
            }
            $n
        }

        ($parts -Join ''),$probablyGet
    }

    # -- MAIN -----------------------------------------------------------------
    # -- MAIN -----------------------------------------------------------------
    # -- MAIN -----------------------------------------------------------------
    # -- MAIN -----------------------------------------------------------------
    try
    {
        $i = 1
        $noun, $probablyGet = getNoun $($ApiCall.path) $PathPrefix
        $verb, $isWrite, $isDelete = getVerb $ApiCall.method $probablyGet

        $functionName = "$verb-$Prefix$noun"
        Write-Verbose "$functionName from $($ApiCall.path)"

        # comment block
        $sb = New-Object 'System.Text.StringBuilder' -ArgumentList $header

        $sb.AppendLine(".SYNOPSIS`n$($ApiCall.summary ?? $ApiCall.description)`n").
            AppendLine(".DESCRIPTION`n$($ApiCall.description)`n") | Out-Null

        foreach ($param in $ApiCall.parameters)
        {
            $sb.AppendLine(".PARAMETER $(ucFirstLetter $param.name)").
                AppendLine($param.description ?? (ucFirstLetter $param.name)).
                AppendLine() | Out-Null
        }
        $sb.AppendLine(".NOTES").
            AppendLine("Generated by 'New-OasFunction' from '$($ApiCall.path)' at $(Get-Date)").
            AppendLine("#>") | Out-Null

        # start of function
        $confirmImpact = $isDelete ? ", ConfirmImpact = 'High'" : ""
        $shouldProcess = $isWrite ? @"
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSShouldProcess", "Nested call supports ShouldProcess")]
    [CmdletBinding(SupportsShouldProcess$confirmImpact)]

"@ : ""

        $t = @"
function $functionName
{
${shouldProcess}    param (
"@

        $queryLines = @()
        $params = @()
        $sb.AppendLine($t) | Out-Null
        foreach ($p in $ApiCall.parameters) {
            $params += makeParam $p
            $queryLines += makeQuery $p
        }
        $sb.AppendJoin(",`n",$params).
            AppendLine(@"

    )

    process {
        Set-StrictMode -Version Latest
        `$ErrorActionPreference = 'Stop'

"@
) | Out-Null

        $body = ""
        $query = ""
        if ($queryLines) {
            $query = '$query'
            $sb.AppendLine('        $query = "?"').
                AppendJoin("`n",$queryLines).
                AppendLine().
                AppendLine('        if ($query -eq "?") { $query = "" } else  { $query.Trim("&")}').
                AppendLine() | Out-Null

        }
        if ($isWrite -and !$isDelete)
        {
            $sb.AppendLine('        $body = @{}') | Out-Null
            $body = ' -Body (ConvertTo-Json $body -Depth 5)'
        }
        $invoke = "        Invoke-${Prefix}Api -RelativeUri `"$($ApiCall.path  -replace "{(\w+)}","`$`$`$1")$query`" -Method $($ApiCall.method)$body"
        $sb.Append($invoke) | Out-Null
        $path = (Join-Path $folder "$functionName.ps1")
        if (Test-Path $path) {
            Write-Warning "Overwriting $path"
            $path = $path -replace "\.ps1","-$i.ps1"
            $i += 1
        }
        $sb.AppendLine().
            AppendLine("    }").
            AppendLine("}").
            ToString() | Out-File $path
    }
    catch
    {
        Write-Warning "Error processing $($ApiCall.method) $($ApiCall.path)"
        Write-Warning (ConvertTo-Json $ApiCall)
        Write-Error "$_`n$($_.ScriptStackTrace)"
    }
}