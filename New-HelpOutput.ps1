<#
.Synopsis
    Generate content for README.md with synopses of PS functions

.Outputs
    Markdown
#>
[CmdletBinding()]
param(
[string] $Folder = $PWD,
[string[]] $FolderExcludes,
[switch] $Recurse,
[string] $GroupPrefix,
[string[]] $Groups
)

$ErrorActionPreference = 'Stop'
Push-Location $Folder

function Get-CommandGroups
{
[CmdletBinding()]
param(
    [Parameter(ValueFromPipeline)]
    $fn
)

process
{
    Set-StrictMode -Version Latest
    Get-GroupName $fn |  Select-Object @{n='c';e={$fn}},@{n='t';e={ $_ }}
}

}
function Get-GroupName
{
[CmdletBinding()]
param($command)
    if ($command.name -cmatch "-$GroupPrefix([A-Z][\w]+)") {
        $noun = $matches[1]
        ($Groups | Where-Object { $noun -like "*$_*"} ) ?? "Misc"
    } else {
        "Misc"
    }
}

try {

    "# Command Synopses`n"

    $progressActivity = "Generating Help"

    function doModule
    {
    [CmdletBinding()]
    param( $moduleName )
        Write-Progress -Activity $progressActivity -CurrentOperation $moduleName
        $module = Import-Module $moduleName -PassThru -Force
        @"
## $($module.Name) Module Functions

To use the module

``````PowerShell
Import-Module $($module.Name)
``````

Function Groups:

"@
        $Groups+"Misc" | Sort-Object | ForEach-Object {
            "* [$_](#${_}-Functions)"
        }
        $commands = Get-Command -Module $module
        Write-Verbose ($commands | Get-CommandGroups | out-string)
        $commandsGroups = $commands | Get-CommandGroups | Group-Object t

        $commandsGroups | ForEach-Object {
            if ($commandsGroups.Count -gt 1) {
                "`n## $($_.name) Functions`n "
            }
            @"
Command     | Synopsis
------------|---------|
"@
            $_.Group.c | ForEach-Object {
                $help = Get-help $_ | Where-Object ModuleName -eq $module
                $desc = "";
                if ( $help -and $help.synopsis )
                {
                $desc = $help.synopsis.trim()
                }
                "$($_.name) | $desc"
            }
        }
        Remove-Module $module
    }

    function doLooseFiles( $folderName )
    {
        $files = Get-ChildItem *-*.ps1
        if ( -not $files )
        {
            return
        }
@"
    ## Files in $folderName
    ``````PowerShell
    Set-Location $PWD
    ``````
    Command     | Synopsis
    ------------|---------|
"@

        Get-ChildItem *-*.ps1 | ForEach-Object {
            $help = Get-help $_
            ".\$(Split-Path $_.Name -Leaf) | $($help.synopsis.trim())"
        }
    }

    function doFolder( $folder, $Recurse )
    {
    Push-Location $folder
    Write-Progress -Activity $progressActivity -Status $folder

    $module = Get-Item *.psd1
    if (!$module) {
        $module = Get-Item *.psm1
    }
    if ( $module )
    {
        Write-Progress -Activity $progressActivity -Status "$folder - $module"
        $module | ForEach-Object { doModule $_ }
    }
    else
    {
        doLooseFiles $folder
        if ( $Recurse )
        {
            Get-ChildItem -Directory | Where-Object name -notin $FolderExcludes | ForEach-Object {
            doFolder $_ $Recurse
            }
        }
    }
    Pop-Location
    }

    if ( "." -notin $FolderExcludes )
    {
        doFolder $PWD $Recurse
    }
    else
    {
        Get-ChildItem -Directory | Where-Object name -notin $FolderExcludes | ForEach-Object {
            doFolder $_ $Recurse
        }
    }

    Write-Progress $progressActivity -Completed
    "`n---`nGenerated by New-HelpOutput.ps1 on $(Get-Date)"
}
finally {
    Pop-Location
}